function copyDataFromSheetInOneSpreadsheetToAnother() {
  var sourceSpreadsheetUrl = 'https://docs.google.com/spreadsheets/d/1M0linoBghADfrfqpVvLPx9ZeDsWowB0ZzMGkfMmMMXQ/edit';
  var destinationSpreadsheetUrl = 'https://docs.google.com/spreadsheets/d/1yCiCgLSm4ZNNah-Rrd8mGm1e10hO430by-oDBuzLruk/edit';

  var sourceSpreadsheet = SpreadsheetApp.openByUrl(sourceSpreadsheetUrl);
  var destinationSpreadsheet = SpreadsheetApp.openByUrl(destinationSpreadsheetUrl);

  var sourceSheet1 = sourceSpreadsheet.getSheetByName('Hoja 1');
  var sourceSheet2 = sourceSpreadsheet.getSheetByName('Hoja 2');
  var destinationSheet = destinationSpreadsheet.getSheetByName('Detalle defectos');
  var transversalDefectsSheet = destinationSpreadsheet.getSheetByName('Defectos Transversales');

  var dataAfterB2 = sourceSheet2.getRange('B3:B' + sourceSheet2.getLastRow()).getValues().flat().filter(String);
  if (dataAfterB2.length === 0) {
    Logger.log("No hay datos después de la celda B2 en Hoja 2. No se copiarán datos de D10:G10 y D19:G19.");
    return;
  }

  var dataFromD10G10 = sourceSheet1.getRange('D10:G10').getDisplayValues().flat().join(' ');
  var dataFromD19G19 = sourceSheet1.getRange('D19:G19').getDisplayValues().flat().join(' ');

  var lastRow = sourceSheet2.getLastRow();
  if (lastRow < 3) {
    Logger.log("No hay datos desde la fila 3 en adelante.");
    return;
  }

  var sourceRange = sourceSheet2.getRange('A3:L' + lastRow);
  var sourceData = sourceRange.getValues();

  sourceData.sort((a, b) => a[2].localeCompare(b[2])); // Ordenar los datos según la columna C (índice 2)

  var dataForDetailDefects = [];
  var dataForTransversalDefects = [];

  for (var i = 0; i < sourceData.length; i++) {
    if (sourceData[i][11] === true) { // Checkboxes en la columna L, índice 11
      dataForTransversalDefects.push(sourceData[i].slice(0, 11));
    } else if (sourceData[i][11] === false) {
      dataForDetailDefects.push(sourceData[i].slice(0, 11));
    }
  }

  var detailDefectsDataCopied = false;
  var transversalDefectsDataCopied = false;

  if (dataForDetailDefects.length > 0) {
    var destinationLastRow = destinationSheet.getLastRow();
    var destinationRange = destinationSheet.getRange(destinationLastRow + 1, 2, dataForDetailDefects.length, 11);
    destinationRange.setValues(dataForDetailDefects);
    detailDefectsDataCopied = true;
  }
  if (dataForTransversalDefects.length > 0) {
    var transversalLastRow = transversalDefectsSheet.getLastRow();
    var transversalRange = transversalDefectsSheet.getRange(transversalLastRow + 1, 2, dataForTransversalDefects.length, 11);
    transversalRange.setValues(dataForTransversalDefects);
    transversalDefectsDataCopied = true;
  }

  if (detailDefectsDataCopied) {
    if (dataFromD10G10.trim() !== '') {
      destinationSheet.getRange('A' + (destinationLastRow + 1)).setValue(dataFromD10G10);
    }
    if (dataFromD19G19.trim() !== '') {
      destinationSheet.getRange('M' + (destinationLastRow + 1)).setValue(dataFromD19G19);
    }
    fillColumnBasedOnC(destinationSheet, dataFromD10G10, dataFromD19G19, destinationLastRow + 1);
  }
  if (transversalDefectsDataCopied) {
    if (dataFromD10G10.trim() !== '') {
      transversalDefectsSheet.getRange('A' + (transversalLastRow + 1)).setValue(dataFromD10G10);
    }
    if (dataFromD19G19.trim() !== '') {
      transversalDefectsSheet.getRange('M' + (transversalLastRow + 1)).setValue(dataFromD19G19);
    }
    fillColumnBasedOnC(transversalDefectsSheet, dataFromD10G10, dataFromD19G19, transversalLastRow + 1);
  }
}

function fillColumnBasedOnC(sheet, valueA, valueM, startRow) {
  var columnCData = sheet.getRange('C' + startRow + ':C' + sheet.getLastRow()).getValues();
  var lastRowC = 0;
  for (var i = 0; i < columnCData.length; i++) {
    if (columnCData[i][0] !== "" && columnCData[i][0] != null) {
      lastRowC = i + 1;
    }
  }

  if (lastRowC > 0) {
    var valuesA = Array(lastRowC).fill([valueA]);
    var valuesM = Array(lastRowC).fill([valueM]);
    sheet.getRange('A' + startRow + ':A' + (startRow + lastRowC - 1)).setValues(valuesA);
    sheet.getRange('M' + startRow + ':M' + (startRow + lastRowC - 1)).setValues(valuesM);
  }
}

